package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short TRUE = 6;
		static public final short FALSE = 7;
		static public final short INT_LITERAL = 8;
		static public final short RCURLY = 9;
		static public final short INT = 10;
		static public final short VOID = 11;
		static public final short BOOLEAN = 12;
		static public final short RPAREN = 13;
		static public final short LCURLY = 14;
		static public final short IF = 15;
		static public final short WHILE = 16;
		static public final short RETURN = 17;
		static public final short BREAK = 18;
		static public final short SEMICOLON = 19;
		static public final short RBRACKET = 20;
		static public final short ELSE = 21;
		static public final short PUBLIC = 22;
		static public final short IMPORT = 23;
		static public final short PLUS = 24;
		static public final short TIMES = 25;
		static public final short DIV = 26;
		static public final short MOD = 27;
		static public final short COMMA = 28;
		static public final short EQL = 29;
		static public final short MODULE = 30;
		static public final short TYPE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LEQ = 34;
		static public final short GEQ = 35;
		static public final short LT = 36;
		static public final short GT = 37;
	}
	static public class AltGoals {
		static public final short Dummy = 38;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLbmTq5KKKXl$TJK882I4aa8HU3Ss4OWY8I0c412GqAOeYYXLHL6nWGr504L5GKK6H8WG" +
		"8BVIEW7HGGHIa2XP4KNg7wx$p9k6TJTvxUITwE2Rdcxapzxypi$DsoW9MF0RZGRoCf$0qdi" +
		"7pw8$Ny0W#m$ru0AtmEIRYLZH5CpH7CbgW9LBm0aRY5d#Zv1Z6eudFgBQElWQZdqF$g0ZQ5" +
		"BYTn#HFJ4AwptOwvMh7kxwpd$fkVkhlTkWdOmX6u0ayY#5u1y$9IKp7L4n385gZ7Uv0J$Jm" +
		"g0dmejdfqiXLtnhqyQn1Rwq9yg8ff3M5lMY2jIR4YwQ8reIwQVAQpxVKV0vmHCzMy$k1buZ" +
		"wIZ43cJ0n2c4o7WrH54Fzw6CGNiSRU3lFY0ug8YzFTu#U#pnw7lReUT6ZPw17pxi#MdC#fx" +
		"CSZj6u5wDbga$bXoX6ClHCHU0ZV8mn#1IVOApFM6UvhsFDE$rF#l0Nj9o8uhYHwLB48nArK" +
		"GTPJEkY7cxIQPP#OrtlNXQYzAexB7zW2dTPbxU6d4S3p6Sw0xFa9rZqpiKob63BIr0IqKpd" +
		"eGnA8mOp4OkoA8MAg8Ggg8eRK1dL48VgA2SJK1urKG6ri1m9SaKk80cDS3CQoocauZRSZlR" +
		"oFRhWJgHnJNV4NNWSNV4AK$ll7Z87lV0UtfTfU0cluaqia9#nI0xX8Op32ap0C7oXj1bOZ8" +
		"LOoNxYs7jrr62$jJWNyKXGy#1w#aIkg2G#MKEEeH5FbCOyCqnOtD$yZJ8OvtzKNdfmxoXuE" +
		"$Pu$ershg$UKBz60C#I8ExHmToVGxZ7Xg8STxrmhjC8lj#UD1tpeK4#DCszQDfhJOWNJH6j" +
		"AU554wurnRne8hIck9l6ytmwertpsyJdBv3AbTU1TuvGhiLqhcnl4Su#OhdgItkD#7zwdC$" +
		"fB0VHZYHXFfKnJ6EunxfcAfWxeRrBLbRxfAzOPzavNd$z1IqtfTM2QGflWGRlXgwq3NVnjZ" +
		"erz1lhUhCCxlskSlOyPQ$bmhJBCxNVlJ2U5xQt1S#K5Bv$CUon96Ut8kSgbYTCASvNQVh3g" +
		"2$A#ZACZU9vKvbhkGeZgx8scZuGWxQjiwt2N7yMqtPC8xccm$YVp3eJoS8$H1A3dZ3r7wN#" +
		"3Lg1f2ph3PRB84fferYswwBPowg1whWnivXq8ri0eoYfHX99CaaWAQGJwK96aA6CgKcQafO" +
		"aWymXaybNP3tPIzYUkPLi8sl9QhAEV4E#9Tl94RAVx227oG6oX#mZnyXESfgS8KV98RA1d2" +
		"2No6PoodwER5YUHowJhyaoSf8SfyDkyvnBWxzfdtUFSm9O1ZLdNRPXsnUr7Kdx2lqcxG6qh" +
		"pAlofnj6adCBsXTccuda7OcwuLvTrsNFTOAkcmv#WwWhx7Mn1FElydprUpEDiOoxwLz$Rmz" +
		"mxNs#1x27CHsWtJxOImFOrv8jrCdTumvYlvWhUTRQOvn#2UoFaJRV6Ui8beRwdiyLhWULrt" +
		"QnRJDkRIAw$OsaiGyuY9OlucieStVmOhI#bsqIsXD6SBts2f5ejrYI#gy4eczLc#awlwd#H" +
		"htzORFsPlqSIltpQqnUhhPxR9jBlxTRlPf$$f5k9jTpwtzaRgkgyxxSaoBj3t4JJTErurpZ" +
		"3NJSv$6OXt3$O4dWbhtt9rTltzB$VoTy$yCnZf7USSrszoQXxwdezpVKJxePhVAxpZy6Eyn" +
		"ppvpkF$jcQDprs4L$gC$kIH$gPofd9EpSYQNuhHA3ye1sI$xPA$iaHzLpIwL$f1Blrs#Oxe" +
		"ZfympH7YM2FTvsIPRPBFm99DDmZD8rfBbP36P9tCbI#R8R9abCsM6PCf65RzUDgXydIoJXR" +
		"90viiYLPuiKvXco2IPgChggqocawMoHDR8QlbILibAMS6QhShtgqf$izkLN#Ie$2v7tCQzM" +
		"wKdSih7vM$EpcLbNsJIW$TLWvYylGRnzc3V8C0RXCLxYKd0kucHGnlU19gfBpRmfXB0kqeG" +
		"Rp860MyhHWw9RjHdMzcaivnERHhjDDf9NaXbFmseQqXQgwyoy0idc3SHau3VEe7ysZ7vlMD" +
		"ZgI$GEeopgSjoDUOsrJbE6$i#Me$rxPddHMtwQZDlhabWsVuUJ7OZZdt4CQ$XXPhignDpdf" +
		"gyqrl4u4tIuatIudtIK7JaVQlpFyGwP3W=");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN8 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 8];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN37 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 37];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Module
			RETURN2,	// [1] $goal = $Dummy Dummy; returns 'Dummy' although none is marked
			RETURN6,	// [2] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [3] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [4] Imports = 
			RETURN3,	// [5] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [6] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [7] Declarations = 
			Action.RETURN,	// [8] Declaration = FuncDeclaration
			Action.RETURN,	// [9] Declaration = FieldDeclaration
			Action.RETURN,	// [10] Declaration = TypeDeclaration
			RETURN9,	// [11] FuncDeclaration = AccessibilitySpecifier TypeName ID LPAREN ParameterList RPAREN LCURLY StatementLists RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [12] StatementLists = Statement StatementLists; returns 'StatementLists' although none is marked
			Action.NONE,  	// [13] StatementLists = 
			RETURN4,	// [14] FieldDeclaration = AccessibilitySpecifier TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [15] TypeDeclaration = AccessibilitySpecifier TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [16] AccessibilitySpecifier = PUBLIC
			Action.NONE,  	// [17] AccessibilitySpecifier = 
			Action.RETURN,	// [18] TypeName = PrimitiveType
			Action.RETURN,	// [19] TypeName = ArrayType
			Action.RETURN,	// [20] TypeName = ID
			Action.RETURN,	// [21] PrimitiveType = VOID
			Action.RETURN,	// [22] PrimitiveType = BOOLEAN
			Action.RETURN,	// [23] PrimitiveType = INT
			RETURN3,	// [24] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [25] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [26] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [27] ParameterList = NonEmptyParameterList
			Action.NONE,  	// [28] ParameterList = 
			RETURN3,	// [29] NonEmptyParameterList = Parameter COMMA NonEmptyParameterList; returns 'NonEmptyParameterList' although none is marked
			Action.RETURN,	// [30] NonEmptyParameterList = Parameter
			Action.RETURN,	// [31] Statement = Localvardeclaration
			Action.RETURN,	// [32] Statement = BlockStatement
			Action.RETURN,	// [33] Statement = IfStatement
			Action.RETURN,	// [34] Statement = WhileStatement
			Action.RETURN,	// [35] Statement = BreakStatement
			Action.RETURN,	// [36] Statement = ReturnStatement
			Action.RETURN,	// [37] Statement = ExpressionStatement
			RETURN2,	// [38] Parameter = TypeName ID; returns 'ID' although none is marked
			RETURN3,	// [39] Localvardeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [40] BlockStatement = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [41] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [42] StatementList = 
			RETURN8,	// [43] IfStatement = IF LPAREN Expression RPAREN Statement ELSE Statement IfTail; returns 'IfTail' although none is marked
			RETURN2,	// [44] IfTail = ELSE Statement; returns 'Statement' although none is marked
			Action.NONE,  	// [45] IfTail = 
			RETURN5,	// [46] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [47] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [48] ReturnStatement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [49] ReturnStatement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [50] ExpressionStatement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [51] Expression = Assignment
			Action.RETURN,	// [52] Expression = RHSExpression
			RETURN3,	// [53] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [54] LHSExpression = ID
			Action.RETURN,	// [55] LHSExpression = ArrayAccess
			RETURN4,	// [56] ArrayAccess = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [57] ArrayAccess = ArrayAccess LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [58] RHSExpression = ArithmeticExpression
			RETURN3,	// [59] RHSExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [60] ComparisonOperator = EQEQ
			Action.RETURN,	// [61] ComparisonOperator = NEQ
			Action.RETURN,	// [62] ComparisonOperator = LT
			Action.RETURN,	// [63] ComparisonOperator = LEQ
			Action.RETURN,	// [64] ComparisonOperator = GT
			Action.RETURN,	// [65] ComparisonOperator = GEQ
			new Action() {	// [66] ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [67] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [68] AdditiveOperator = PLUS
			Action.RETURN,	// [69] AdditiveOperator = MINUS
			new Action() {	// [70] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [71] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [72] MultiplicativeOperator = TIMES
			Action.RETURN,	// [73] MultiplicativeOperator = DIV
			Action.RETURN,	// [74] MultiplicativeOperator = MOD
			RETURN2,	// [75] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [76] Factor = PrimaryExpression
			Action.RETURN,	// [77] PrimaryExpression = LHSExpression
			Action.RETURN,	// [78] PrimaryExpression = FunctionCall
			Action.RETURN,	// [79] PrimaryExpression = ArrayExpression
			Action.RETURN,	// [80] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [81] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [82] PrimaryExpression = Boolean
			Action.RETURN,	// [83] PrimaryExpression = ParenthesizedExpression
			RETURN4,	// [84] FunctionCall = ID LPAREN ExpressionLists RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [85] ExpressionLists = NonEmptyExpressionList
			Action.NONE,  	// [86] ExpressionLists = 
			RETURN3,	// [87] NonEmptyExpressionList = Expression COMMA NonEmptyExpressionList; returns 'NonEmptyExpressionList' although none is marked
			Action.RETURN,	// [88] NonEmptyExpressionList = Expression
			RETURN3,	// [89] ArrayExpression = LBRACKET NonEmptyExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [90] ParenthesizedExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [91] Boolean = TRUE
			Action.RETURN,	// [92] Boolean = FALSE
			RETURN37	// [93] Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL; returns 'EQL' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
